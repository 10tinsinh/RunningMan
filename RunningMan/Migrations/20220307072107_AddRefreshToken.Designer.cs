// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RunningMan.Data;

namespace RunningMan.Migrations
{
    [DbContext(typeof(MyDbContext))]
    [Migration("20220307072107_AddRefreshToken")]
    partial class AddRefreshToken
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("RunningMan.Data.Account", b =>
                {
                    b.Property<int>("Account_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Account_id");

                    b.ToTable("Account");
                });

            modelBuilder.Entity("RunningMan.Data.AccountType", b =>
                {
                    b.Property<int>("AccountType_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name_type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("AccountType_id");

                    b.ToTable("AccountType");
                });

            modelBuilder.Entity("RunningMan.Data.DetailAccount", b =>
                {
                    b.Property<int>("DetailAccount_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AccountType_id")
                        .HasColumnType("int");

                    b.Property<int?>("Account_id")
                        .HasColumnType("int");

                    b.HasKey("DetailAccount_id");

                    b.HasIndex("AccountType_id");

                    b.HasIndex("Account_id");

                    b.ToTable("DetailAccount");
                });

            modelBuilder.Entity("RunningMan.Data.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExpriredAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("IssueAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("JwtId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("RefreshToken");
                });

            modelBuilder.Entity("RunningMan.Data.DetailAccount", b =>
                {
                    b.HasOne("RunningMan.Data.AccountType", "AccountType")
                        .WithMany("DetailAccounts")
                        .HasForeignKey("AccountType_id");

                    b.HasOne("RunningMan.Data.Account", "Account")
                        .WithMany("DetailAccounts")
                        .HasForeignKey("Account_id");

                    b.Navigation("Account");

                    b.Navigation("AccountType");
                });

            modelBuilder.Entity("RunningMan.Data.RefreshToken", b =>
                {
                    b.HasOne("RunningMan.Data.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("RunningMan.Data.Account", b =>
                {
                    b.Navigation("DetailAccounts");
                });

            modelBuilder.Entity("RunningMan.Data.AccountType", b =>
                {
                    b.Navigation("DetailAccounts");
                });
#pragma warning restore 612, 618
        }
    }
}
